// <auto-generated />
using dz.SoftwareRequest.Data;
using dz.SoftwareRequest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace dz.SoftwareRequest.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("dz.SoftwareRequest.Models.ActionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionBy");

                    b.Property<DateTime>("ActionDate");

                    b.HasKey("Id");

                    b.ToTable("ActionRole");
                });

            modelBuilder.Entity("dz.SoftwareRequest.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("dz.SoftwareRequest.Models.DevelopTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionBy");

                    b.Property<string>("AttrachFile");

                    b.Property<DateTime>("FinishDate");

                    b.Property<int>("Holiday");

                    b.Property<int>("Manday");

                    b.Property<string>("Remark");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("DevelopTask");
                });

            modelBuilder.Entity("dz.SoftwareRequest.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApproveById");

                    b.Property<int?>("CloseProjectById");

                    b.Property<int?>("CodeReviewId");

                    b.Property<int?>("DeploymentId");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<int?>("DevelopmentId");

                    b.Property<string>("DocNo");

                    b.Property<string>("MeetingDate");

                    b.Property<string>("MeetingRemark");

                    b.Property<int?>("RequestById");

                    b.Property<int?>("SecurityTestId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int?>("UATId");

                    b.HasKey("Id");

                    b.HasIndex("ApproveById");

                    b.HasIndex("CloseProjectById");

                    b.HasIndex("CodeReviewId");

                    b.HasIndex("DeploymentId");

                    b.HasIndex("DevelopmentId");

                    b.HasIndex("RequestById");

                    b.HasIndex("SecurityTestId");

                    b.HasIndex("UATId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("dz.SoftwareRequest.Models.Request", b =>
                {
                    b.HasOne("dz.SoftwareRequest.Models.ActionRole", "ApproveBy")
                        .WithMany()
                        .HasForeignKey("ApproveById");

                    b.HasOne("dz.SoftwareRequest.Models.ActionRole", "CloseProjectBy")
                        .WithMany()
                        .HasForeignKey("CloseProjectById");

                    b.HasOne("dz.SoftwareRequest.Models.DevelopTask", "CodeReview")
                        .WithMany()
                        .HasForeignKey("CodeReviewId");

                    b.HasOne("dz.SoftwareRequest.Models.DevelopTask", "Deployment")
                        .WithMany()
                        .HasForeignKey("DeploymentId");

                    b.HasOne("dz.SoftwareRequest.Models.DevelopTask", "Development")
                        .WithMany()
                        .HasForeignKey("DevelopmentId");

                    b.HasOne("dz.SoftwareRequest.Models.ActionRole", "RequestBy")
                        .WithMany()
                        .HasForeignKey("RequestById");

                    b.HasOne("dz.SoftwareRequest.Models.DevelopTask", "SecurityTest")
                        .WithMany()
                        .HasForeignKey("SecurityTestId");

                    b.HasOne("dz.SoftwareRequest.Models.DevelopTask", "UAT")
                        .WithMany()
                        .HasForeignKey("UATId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dz.SoftwareRequest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dz.SoftwareRequest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dz.SoftwareRequest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dz.SoftwareRequest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
